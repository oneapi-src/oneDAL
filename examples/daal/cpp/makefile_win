#===============================================================================
# Copyright 2014 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#===============================================================================

##  Content:
##     Intel(R) oneAPI Data Analytics Library examples creation and run
##******************************************************************************

help:
	@echo "Usage: nmake {{lib|dll|help}}"
	@echo "[example=name] [compiler=compiler_name] [mode=mode_name]"
	@echo
	@echo "name              - example name."
	@echo
	@echo "compiler_name     - can be intel, msvs, clang or icx. Default value is intel."
	@echo "                    Intel(R) C++ Compiler as default."
	@echo
	@echo "mode_name         - can be build or run. Default is run."

##------------------------------------------------------------------------------
## examples of using:
##
## nmake lib example=kmeans_dense_batch+         - build by Intel(R) C++ Compiler (as default)
##                                                 and run kmeans_dense_batch example for 32-bit
##                                                 applications, static linking
##
## nmake dll compiler=msvs                       - build by Microsoft(R) C++ compiler and run all examples
##                                                 of Intel(R) oneDAL dynamic linking
##
## nmake lib example=kmeans_dense_batch+         - build by Intel(R) C++ Compiler (as default)
##                                                 and run kmeans_dense_batch example for 64-bit
##                                                 applications, static linking
##
## nmake dll                                     - build by Intel(R) C++ Compiler (as default)
##                                                 and run all examples for Intel(R) 64 processor
##                                                 family applications, dynamic linking
##
## nmake dll mode=build                          - build only (not run) by Intel(R) C++ Compiler
##                                                 (as default) all examples for Intel(R)64
##                                                 processor family applications, dynamic linking
##
## nmake help                                    - show help
##
##------------------------------------------------------------------------------

!MESSAGE =====make build system for DAAL in deprecated, please use cmake instead====!

{examples_list}

!IFNDEF example
example = $(EXAMPLES_LIST)
!ENDIF

!IFNDEF compiler
compiler = intel
!ENDIF

!IFNDEF mode
mode = run
!ENDIF

!IFNDEF DAALROOT
DAALROOT = ..\..\..
!ENDIF

DAAL_PATH = $(DAALROOT)\lib\intel64

!IF ("$(mode)"=="build")
RES = $(example:+=.exe)
!ENDIF

!IF ("$(mode)"=="run")
RES = $(example:+=.res)
!ENDIF

#---DEFAULTS---
OUT_OPTS=/Fo$(RES_DIR)\\ /Fe$(RES_DIR)
CLEAN=del_objs
#--------------

!IF ("$(compiler)"=="clang")
CC=clang-cl
COPTS = /EHs
OUT_OPTS = /Fe$(RES_DIR)
CLEAN=
!ENDIF

!IF ("$(compiler)"=="intel")
CC=icl
!ENDIF

!IF ("$(compiler)"=="msvs")
CC=cl
LOPTS = /wd4996
!ENDIF

!IF ("$(compiler)"=="icx")
CC=icx
COPTS = /EHs
OUT_OPTS = /Fe$(RES_DIR)
CLEAN=
!ENDIF

!IF ("$(compiler)"!="msvs")
COPTS=-Wall -w -m64 $(COPTS)

!ELSE
COPTS=-W3 -EHsc $(COPTS)
!ENDIF

!IF ("$(RES_EXT)"=="lib")
LOPTS = "$(DAAL_PATH)\onedal_core$(EXT)" "$(DAAL_PATH)\onedal_thread.lib" $(LOPTS) tbb12.lib tbbmalloc.lib
!ELSE
LOPTS = "$(DAAL_PATH)\onedal_core$(EXT)" $(LOPTS)
!ENDIF

COPTS = -MD -Isource\utils $(COPTS) $(OUT_OPTS)
RES_DIR  =_results\$(compiler)_intel64_$(RES_EXT)

lib libintel64:
	nmake comm_func $(RES) $(CLEAN) EXT=.lib RES_EXT=lib compiler=$(compiler)
dll dllintel64:
	nmake comm_func $(RES) $(CLEAN) EXT=_dll.lib RES_EXT=dll compiler=$(compiler)

comm_func:
	if not exist _results md _results
	if not exist $(RES_DIR) md $(RES_DIR)

del_objs:
	del /Q $(RES_DIR)\*.obj

{make_build_rules}
{make_run_rules}

#-------------------------------------------------------------------------------
