/* file: training_result.cpp */
/*******************************************************************************
* Copyright 2014-2022 Intel Corporation
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>

#include "daal.h"
#include "com_intel_daal_algorithms_logistic_regression_training_TrainingResult.h"

#include "com/intel/daal/common_helpers.h"

USING_COMMON_NAMESPACES()
using namespace daal::algorithms::logistic_regression::training;

#include "com_intel_daal_algorithms_classifier_training_TrainingResultId.h"
#define ModelResult com_intel_daal_algorithms_classifier_training_TrainingResultId_Model

/*
 * Class:     com_intel_daal_algorithms_multinomial_naive_bayes_training_TrainingResult
 * Method:    cNewResult
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_logistic_1regression_training_TrainingResult_cNewResult(JNIEnv * env, jobject thisObj)
{
    return jniArgument<logistic_regression::training::Result>::newObj();
}

/*
 * Class:     com_intel_daal_algorithms_multinomial_naive_bayes_training_Batch_Result
 * Method:    cGetModel
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_logistic_1regression_training_TrainingResult_cGetModel(JNIEnv * env, jobject thisObj,
                                                                                                              jlong resAddr, jint id)
{
    if (id == ModelResult)
    {
        return jniArgument<logistic_regression::training::Result>::get<classifier::training::ResultId, logistic_regression::Model>(
            resAddr, classifier::training::model);
    }

    return (jlong)0;
}
