/* file: train_distributedinput.cpp */
/*******************************************************************************
* Copyright 2014 Intel Corporation
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_intel_daal_algorithms_classifier_training_TrainingDistributedInput */

#include "daal.h"
#include "com_intel_daal_algorithms_multinomial_naive_bayes_training_TrainingDistributedInput.h"

#include "com/intel/daal/common_helpers.h"

USING_COMMON_NAMESPACES();
using namespace daal::algorithms::multinomial_naive_bayes;
using namespace daal::algorithms::multinomial_naive_bayes::training;

/*
 * Class:     com_intel_daal_algorithms_multinomial_naive_bayes_training_TrainingDistributedInput
 * Method:    cAddInput
 * Signature: (JIJ)V
 */
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_multinomial_1naive_1bayes_training_TrainingDistributedInput_cAddInput(JNIEnv * env,
                                                                                                                            jobject thisObj,
                                                                                                                            jlong inputAddr, jint id,
                                                                                                                            jlong ntAddr)
{
    jniInput<DistributedInput>::add<Step2MasterInputId, multinomial_naive_bayes::training::PartialResult>(inputAddr, partialModels, ntAddr);
}
