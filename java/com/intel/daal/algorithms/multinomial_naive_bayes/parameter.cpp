/* file: parameter.cpp */
/*******************************************************************************
* Copyright 2014 Intel Corporation
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>/* Header for class com_intel_daal_algorithms_multinomial_naive_bayes_Batch */

#include "daal.h"
#include "com_intel_daal_algorithms_multinomial_naive_bayes_Parameter.h"

using namespace daal;
using namespace daal::algorithms;
using namespace daal::data_management;
using namespace daal::services;

JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_multinomial_1naive_1bayes_Parameter_cSetPriorClassEstimates(JNIEnv * env, jobject thisObj,
                                                                                                                  jlong parAddr, jlong ntAddr)
{
    SerializationIfacePtr * ntShPtr                                      = (SerializationIfacePtr *)ntAddr;
    (*(multinomial_naive_bayes::Parameter *)parAddr).priorClassEstimates = staticPointerCast<NumericTable, SerializationIface>(*ntShPtr);
}

JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_multinomial_1naive_1bayes_Parameter_cGetPriorClassEstimates(JNIEnv * env, jobject thisObj,
                                                                                                                   jlong parAddr)
{
    SerializationIfacePtr * ntShPtr = new SerializationIfacePtr();
    *ntShPtr                        = (*(multinomial_naive_bayes::Parameter *)parAddr).priorClassEstimates;
    return (jlong)ntShPtr;
}

JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_multinomial_1naive_1bayes_Parameter_cSetAlpha(JNIEnv * env, jobject thisObj, jlong parAddr,
                                                                                                    jlong ntAddr)
{
    SerializationIfacePtr * ntShPtr                        = (SerializationIfacePtr *)ntAddr;
    (*(multinomial_naive_bayes::Parameter *)parAddr).alpha = staticPointerCast<NumericTable, SerializationIface>(*ntShPtr);
}

JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_multinomial_1naive_1bayes_Parameter_cGetAlpha(JNIEnv * env, jobject thisObj, jlong parAddr)
{
    SerializationIfacePtr * ntShPtr = new SerializationIfacePtr();
    *ntShPtr                        = (*(multinomial_naive_bayes::Parameter *)parAddr).alpha;
    return (jlong)ntShPtr;
}
