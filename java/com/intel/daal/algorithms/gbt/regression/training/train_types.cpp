/* file: train_types.cpp */
/*******************************************************************************
* Copyright 2014 Intel Corporation
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>

#include "daal.h"
#include "com_intel_daal_algorithms_gbt_regression_training_Parameter.h"
#include "com_intel_daal_algorithms_gbt_regression_training_TrainingResult.h"
#include "com_intel_daal_algorithms_gbt_regression_training_TrainingInput.h"
#include "com/intel/daal/common_helpers.h"

USING_COMMON_NAMESPACES()

namespace gbtr  = gbt::regression;
namespace gbtt  = gbt::training;
namespace gbtrt = daal::algorithms::gbt::regression::training;

#include "com_intel_daal_algorithms_gbt_regression_training_TrainingResultId.h"
#define ModelResult com_intel_daal_algorithms_gbt_regression_training_TrainingResultId_Model

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_Parameter
* Method:    cGetSplitMethod
* Signature: (J)I
*/
JNIEXPORT jint JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_Parameter_cGetSplitMethod(JNIEnv *, jobject, jlong parAddr)
{
    return (jint)(*(gbtrt::Parameter *)parAddr).splitMethod;
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_Parameter
* Method:    cSetSplitMethod
* Signature: (JI)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_Parameter_cSetSplitMethod(JNIEnv *, jobject, jlong parAddr, jint value)
{
    (*(gbtrt::Parameter *)parAddr).splitMethod = (gbtt::SplitMethod)value;
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_Parameter
* Method:    cGetMaxIterations
* Signature: (J)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_Parameter_cGetMaxIterations(JNIEnv *, jobject, jlong parAddr)
{
    return (jlong)(*(gbtrt::Parameter *)parAddr).maxIterations;
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_Parameter
* Method:    cSetMaxIterations
* Signature: (JJ)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_Parameter_cSetMaxIterations(JNIEnv *, jobject, jlong parAddr,
                                                                                                          jlong value)
{
    (*(gbtrt::Parameter *)parAddr).maxIterations = value;
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_Parameter
* Method:    cSetObservationsPerTreeFraction
* Signature: (JD)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_Parameter_cSetObservationsPerTreeFraction(JNIEnv *, jobject,
                                                                                                                        jlong parAddr, jdouble value)
{
    (*(gbtrt::Parameter *)parAddr).observationsPerTreeFraction = value;
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_Parameter
* Method:    cGetObservationsPerTreeFraction
* Signature: (J)D
*/
JNIEXPORT jdouble JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_Parameter_cGetObservationsPerTreeFraction(JNIEnv *, jobject,
                                                                                                                           jlong parAddr)
{
    return (jdouble)(*(gbtrt::Parameter *)parAddr).observationsPerTreeFraction;
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_Parameter
* Method:    cGetFeaturesPerNode
* Signature: (J)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_Parameter_cGetFeaturesPerNode(JNIEnv *, jobject, jlong parAddr)
{
    return (jlong)(*(gbtrt::Parameter *)parAddr).featuresPerNode;
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_Parameter
* Method:    cSetFeaturesPerNode
* Signature: (JJ)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_Parameter_cSetFeaturesPerNode(JNIEnv *, jobject, jlong parAddr,
                                                                                                            jlong value)
{
    (*(gbtrt::Parameter *)parAddr).featuresPerNode = value;
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_Parameter
* Method:    cGetMaxTreeDepth
* Signature: (J)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_Parameter_cGetMaxTreeDepth(JNIEnv *, jobject, jlong parAddr)
{
    return (jlong)(*(gbtrt::Parameter *)parAddr).maxTreeDepth;
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_Parameter
* Method:    cSetMaxTreeDepth
* Signature: (JJ)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_Parameter_cSetMaxTreeDepth(JNIEnv *, jobject, jlong parAddr,
                                                                                                         jlong value)
{
    (*(gbtrt::Parameter *)parAddr).maxTreeDepth = value;
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_Parameter
* Method:    cGetMinObservationsInLeafNode
* Signature: (J)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_Parameter_cGetMinObservationsInLeafNode(JNIEnv *, jobject,
                                                                                                                       jlong parAddr)
{
    return (jlong)(*(gbtrt::Parameter *)parAddr).minObservationsInLeafNode;
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_Parameter
* Method:    cSetMinObservationsInLeafNode
* Signature: (JJ)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_Parameter_cSetMinObservationsInLeafNode(JNIEnv *, jobject,
                                                                                                                      jlong parAddr, jlong value)
{
    (*(gbtrt::Parameter *)parAddr).minObservationsInLeafNode = value;
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_Parameter
* Method:    cSetEngine
* Signature: (JJ)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_Parameter_cSetEngine(JNIEnv * env, jobject thisObj, jlong cParameter,
                                                                                                   jlong engineAddr)
{
    (((gbtrt::Parameter *)cParameter))->engine = staticPointerCast<engines::BatchBase, AlgorithmIface>(*(SharedPtr<AlgorithmIface> *)engineAddr);
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_Parameter
* Method:    cSetShrinkage
* Signature: (JD)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_Parameter_cSetShrinkage(JNIEnv *, jobject, jlong parAddr, jdouble value)
{
    (*(gbtrt::Parameter *)parAddr).shrinkage = value;
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_Parameter
* Method:    cGetShrinkage
* Signature: (J)D
*/
JNIEXPORT jdouble JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_Parameter_cGetShrinkage(JNIEnv *, jobject, jlong parAddr)
{
    return (jdouble)(*(gbtrt::Parameter *)parAddr).shrinkage;
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_Parameter
* Method:    cSetMinSplitLoss
* Signature: (JD)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_Parameter_cSetMinSplitLoss(JNIEnv *, jobject, jlong parAddr,
                                                                                                         jdouble value)
{
    (*(gbtrt::Parameter *)parAddr).minSplitLoss = value;
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_Parameter
* Method:    cGetMinSplitLoss
* Signature: (J)D
*/
JNIEXPORT jdouble JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_Parameter_cGetMinSplitLoss(JNIEnv *, jobject, jlong parAddr)
{
    return (jdouble)(*(gbtrt::Parameter *)parAddr).minSplitLoss;
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_Parameter
* Method:    cSetLambda
* Signature: (JD)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_Parameter_cSetLambda(JNIEnv *, jobject, jlong parAddr, jdouble value)
{
    (*(gbtrt::Parameter *)parAddr).lambda = value;
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_Parameter
* Method:    cGetLambda
* Signature: (J)D
*/
JNIEXPORT jdouble JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_Parameter_cGetLambda(JNIEnv *, jobject, jlong parAddr)
{
    return (jdouble)(*(gbtrt::Parameter *)parAddr).lambda;
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_Parameter
* Method:    cSetMaxBins
* Signature: (JJ)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_Parameter_cSetMaxBins(JNIEnv *, jobject, jlong parAddr, jlong value)
{
    (*(gbtrt::Parameter *)parAddr).maxBins = value;
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_Parameter
* Method:    cGetMaxBins
* Signature: (J)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_Parameter_cGetMaxBins(JNIEnv *, jobject, jlong parAddr)
{
    return (jlong)(*(gbtrt::Parameter *)parAddr).maxBins;
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_Parameter
* Method:    cSetMinBinSize
* Signature: (JJ)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_Parameter_cSetMinBinSize(JNIEnv *, jobject, jlong parAddr, jlong value)
{
    (*(gbtrt::Parameter *)parAddr).minBinSize = value;
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_Parameter
* Method:    cGetMinBinSize
* Signature: (J)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_Parameter_cGetMinBinSize(JNIEnv *, jobject, jlong parAddr)
{
    return (jlong)(*(gbtrt::Parameter *)parAddr).minBinSize;
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_TrainingResult
* Method:    cGetResult
* Signature: (JII)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_TrainingResult_cGetResult(JNIEnv * env, jobject thisObj, jlong algAddr,
                                                                                                         jint prec, jint method)
{
    return jniBatch<gbtrt::Method, gbtrt::Batch, gbtrt::defaultDense>::getResult(prec, method, algAddr);
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_TrainingResult
* Method:    cGetModel
* Signature: (JI)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_TrainingResult_cGetModel(JNIEnv *, jobject thisObj, jlong resAddr,
                                                                                                        jint id)
{
    gbtr::ModelPtr * m   = new gbtr::ModelPtr();
    gbtrt::ResultPtr res = services::staticPointerCast<gbtrt::Result, SerializationIface>(*((SerializationIfacePtr *)resAddr));
    switch (id)
    {
    case ModelResult: *m = res->get(gbtrt::model); break;
    default: break;
    }
    return (jlong)m;
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_TrainingInput
* Method:    cInit
* Signature: (JII)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_TrainingInput_cInit(JNIEnv *, jobject, jlong algAddr, jint prec,
                                                                                                   jint method)
{
    return jniBatch<gbtrt::Method, gbtrt::Batch, gbtrt::defaultDense>::getInput(prec, method, algAddr);
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_TrainingInput
* Method:    cSetInput
* Signature: (JIJ)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_TrainingInput_cSetInput(JNIEnv *, jobject, jlong inputAddr, jint id,
                                                                                                      jlong valAddr)
{
    jniInput<gbtrt::Input>::set<gbtrt::InputId, NumericTable>(inputAddr, gbtrt::InputId(id), valAddr);
}

/*
* Class:     com_intel_daal_algorithms_gbt_regression_training_TrainingInput
* Method:    cGetInput
* Signature: (JI)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_gbt_regression_training_TrainingInput_cGetInput(JNIEnv *, jobject, jlong inputAddr, jint id)
{
    return jniInput<gbtrt::Input>::get<gbtrt::InputId, NumericTable>(inputAddr, gbtrt::InputId(id));
}
