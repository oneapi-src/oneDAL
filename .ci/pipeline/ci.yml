# C/C++ with GCC
# Build your C/C++ project with GCC using make.
# Add steps that publish test results, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/c-cpp/gcc

trigger:
  branches:
    include:
    - master
    - rls/*
  paths:
    exclude:
    - docs
    - .ci/pipeline/docs.yml
pr:
  branches:
    include:
    - master
    - rls/*
  paths:
    exclude:
    - docs
    - .ci/pipeline/docs.yml

- job: 'LinuxBazel'
  timeoutInMinutes: 0
  pool:
    vmImage: 'ubuntu-22.04'
  variables:
    platform.type : 'lnx32e'
    BAZEL_CACHE_DIR: $(Pipeline.Workspace)/.bazel-cache
    BAZEL_VERSION: $(Pipeline.Workspace)/bazelisk-linux-amd64
    BAZEL_CACHE_MAX_SIZE_KB: 4194304 # Size in kilobytes ~ 4Gb
  steps:
  - script: |
      # sourcing done to set bazel version value from script
      source .ci/env/bazelisk.sh
      echo "##vso[task.setvariable variable=BAZEL_VERSION]${BAZEL_VERSION}"
    displayName: 'install-bazel'
  - script: |
      .ci/scripts/describe_system.sh
    displayName: 'System info'
  - task: Cache@2
    inputs:
      # Commit ID is added to a cache key. Caches are immutable by design,
      # so we always need to change a key to upload the last version
      # of the Bazel cache. Cache lookup is based on `restoreKeys` option.
      key: '"$(BAZEL_VERSION)" | "$(Agent.OS)" | "v1" | "$(Build.SourceVersion)"'
      restoreKeys: |
        "$(BAZEL_VERSION)" | "$(Agent.OS)" | "v1"
      path: $(BAZEL_CACHE_DIR)
    displayName: 'bazel-cache'

  - script: |
      if [ -f "${BAZEL_CACHE_DIR}/cache-clean-timestamp" ]; then
        echo
        echo "Last time the cache is cleaned:"
        cat "${BAZEL_CACHE_DIR}/cache-clean-timestamp"
        echo
      fi

      # Create `.bazelrc` and set cache directory
      # Minimal CPU instruction set in Azure is AVX2
      echo "build --disk_cache=$(BAZEL_CACHE_DIR) --cpu=avx2" > ~/.bazelrc

      # Display oneDAL build configuration
      bazel build @config//:dump
      echo
      cat bazel-bin/external/config/config.json
      echo
    displayName: 'bazel-configure'
  - script: |
      bazel build :release
    displayName: 'release'
  - task: PublishPipelineArtifact@1
    inputs:
      artifactName: '$(platform.type) Bazel build'
      targetPath: '$(Build.Repository.LocalPath)/bazel-bin/release'
    displayName: 'Upload build artifacts'
  - script: |
      bazel test //examples/oneapi/cpp:all \
                 --test_link_mode=dev \
                 --test_thread_mode=par
    displayName: 'cpp-examples-thread-dev'

  - script: |
      export DALROOT=`pwd`/bazel-bin/release/daal/latest
      bazel test //examples/oneapi/cpp:all \
                 --test_link_mode=release_static \
                 --test_thread_mode=par
    displayName: 'cpp-examples-thread-release-static'

  - script: |
      export DALROOT=`pwd`/bazel-bin/release/daal/latest
      bazel test //examples/oneapi/cpp:all \
                 --test_link_mode=release_dynamic \
                 --test_thread_mode=par
    displayName: 'cpp-examples-thread-release-dynamic'

  - script: |
      bazel test //cpp/daal:tests
    displayName: 'daal-tests-algorithms'

  - script: |
      bazel test //cpp/oneapi/dal:tests \
                 --config=host \
                 --test_link_mode=dev \
                 --test_thread_mode=par \
                 --test_output=all
    displayName: 'cpp-tests-thread-dev'

  - script: |
      # Clear cache if its size exceeds some predefined value
      cache_size=$(du -sk "${BAZEL_CACHE_DIR}" | cut -f1)
      cache_size_mb=$(du -sm "${BAZEL_CACHE_DIR}" | cut -f1)
      echo "Bazel cache dir is ${BAZEL_CACHE_DIR}"
      echo "Bazel cache size is ${cache_size_mb}Mb"
      if [ ${cache_size} -ge ${BAZEL_CACHE_MAX_SIZE_KB} ]; then
          echo "Run cache cleanup..."
          echo "Current cache directory content:"
          ls -1 "${BAZEL_CACHE_DIR}"
          echo "--------------------------------"
          echo "Run bazel clean with expunge"
          echo "Remove cache directory"
          rm -r "${BAZEL_CACHE_DIR}"
          mkdir -p "${BAZEL_CACHE_DIR}"
          echo "Write timestamp to the cache"
          date > "${BAZEL_CACHE_DIR}/cache-clean-timestamp"
          echo "Current cache directory content:"
          ls -1 "${BAZEL_CACHE_DIR}"
          echo "--------------------------------"
      else
          echo "No need for cleanup"
      fi
    displayName: 'bazel-cache-limit'