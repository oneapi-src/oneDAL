# C/C++ with GCC
# Build your C/C++ project with GCC using make.
# Add steps that publish test results, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/c-cpp/gcc

trigger:
  branches:
    include:
    - master
    - rls/*

pr:
  branches:
    include:
    - master
    - rls/*

jobs:
- job: 'ClangFormat'
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
    - script: |
        .ci/env/clang.sh
      displayName: 'apt-get'
    - script: |
        .ci/scripts/clang-format.sh
      displayName: 'clang-format check'
      failOnStderr: true
- job: 'LinuxMake'
  timeoutInMinutes: 0
  variables:
    release.dir: '__release_lnx_gnu'
    platform.type : 'lnx32e'
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - script: sudo apt-get update && sudo apt-get install gcc-multilib g++-multilib openjdk-8-jdk
    displayName: 'apt-get'
  - script: |
      .ci/scripts/build.sh --platform $(platform.type) --target daal
    displayName: 'make daal'
  - script: |
      .ci/scripts/build.sh --platform $(platform.type) --target oneapi_c
    displayName: 'make oneapi_c'
  - script: |
      cp -R $(release.dir) $(Build.ArtifactStagingDirectory)/
    displayName: 'Copy build'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: '$(platform.type) build'
      targetPath: '$(release.dir)'
  - script: |
      .ci/scripts/test.sh --test-kind examples --build-dir $(release.dir) --platform $(platform.type)
    displayName: 'examples'

- job: 'LinuxBazel'
  timeoutInMinutes: 0
  pool:
    vmImage: 'ubuntu-20.04'
  variables:
    BAZEL_VERSION: bazel-4.0.0
    BAZEL_CACHE_DIR: $(Pipeline.Workspace)/.bazel-cache
    BAZEL_CACHE_MAX_SIZE_KB: 4194304 # Size in kilobytes ~ 4Gb
  steps:
  - script: |
      # Add bazel repository
      sudo apt install curl gnupg
      curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor > bazel.gpg
      sudo mv bazel.gpg /etc/apt/trusted.gpg.d/
      echo "deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8" | \
        sudo tee /etc/apt/sources.list.d/bazel.list

      sudo apt-get update
      sudo apt-get install gcc-multilib \
                           g++-multilib \
                           binutils \
                           openjdk-11-jdk \
                           $(BAZEL_VERSION)

    displayName: 'install-deps'

  - task: Cache@2
    inputs:
      # Commit ID is added to a cache key. Caches are immutable by design,
      # so we always need to change a key to upload the last version
      # of the Bazel cache. Cache lookup is based on `restoreKeys` option.
      key: '"$(BAZEL_VERSION)" | "$(Agent.OS)" | "v2" | "$(Build.SourceVersion)"'
      restoreKeys: |
        "$(BAZEL_VERSION)" | "$(Agent.OS)" | "v2"
      path: $(BAZEL_CACHE_DIR)
    displayName: 'bazel-cache'

  - script: |
      if [ -f "${BAZEL_CACHE_DIR}/cache-clean-timestamp" ]; then
        echo
        echo "Last time the cache is cleaned:"
        cat "${BAZEL_CACHE_DIR}/cache-clean-timestamp"
        echo
      fi

      # Create `.bazelrc` and set cache directory
      # Minimal CPU instruction set in Azure is AVX2
      echo "build --disk_cache=$(BAZEL_CACHE_DIR) --cpu=avx2" > ~/.bazelrc

      # Display oneDAL build configuration
      bazel build @config//:dump
      echo
      cat bazel-bin/external/config/config.json
      echo
    displayName: 'bazel-configure'

  - script: |
      bazel build :release
    displayName: 'release'

  - script: |
      bazel test //examples/oneapi/cpp:all \
                 --test_link_mode=dev \
                 --test_thread_mode=par
    displayName: 'cpp-examples-thread-dev'

  - script: |
      export DAALROOT=`pwd`/bazel-bin/release/daal/latest
      bazel test //examples/oneapi/cpp:all \
                 --test_link_mode=release_static \
                 --test_thread_mode=par
    displayName: 'cpp-examples-thread-release-static'

  - script: |
      export DAALROOT=`pwd`/bazel-bin/release/daal/latest
      bazel test //examples/oneapi/cpp:all \
                 --test_link_mode=release_dynamic \
                 --test_thread_mode=par
    displayName: 'cpp-examples-thread-release-dynamic'

  - script: |
      bazel test //cpp/oneapi/dal:tests \
                 --config=host \
                 --test_link_mode=dev \
                 --test_thread_mode=par
    displayName: 'cpp-tests-thread-dev'

  - script: |
      # Clear cache if its size exceeds some predefined value
      cache_size=$(du -sk "${BAZEL_CACHE_DIR}" | cut -f1)
      cache_size_mb=$(du -sm "${BAZEL_CACHE_DIR}" | cut -f1)
      echo "Bazel cache dir is ${BAZEL_CACHE_DIR}"
      echo "Bazel cache size is ${cache_size_mb}Mb"
      if [ ${cache_size} -ge ${BAZEL_CACHE_MAX_SIZE_KB} ]; then
          echo "Run cache cleanup..."
          echo "Current cache directory content:"
          ls -1 "${BAZEL_CACHE_DIR}"
          echo "--------------------------------"
          echo "Run bazel clean with expunge"
          echo "Remove cache directory"
          rm -r "${BAZEL_CACHE_DIR}"
          mkdir -p "${BAZEL_CACHE_DIR}"
          echo "Write timestamp to the cache"
          date > "${BAZEL_CACHE_DIR}/cache-clean-timestamp"
          echo "Current cache directory content:"
          ls -1 "${BAZEL_CACHE_DIR}"
          echo "--------------------------------"
      else
          echo "No need for cleanup"
      fi
    displayName: 'bazel-cache-limit'

- job: daal4py
  dependsOn: LinuxMake
  timeoutInMinutes: 0
  variables:
    release.dir: '__release_lnx_gnu'
    platform.type : 'lnx32e'
  pool:
    vmImage: 'ubuntu-20.04'
    maxParallel: 2
  strategy:
    matrix:
      Python38:
        python.version: '3.8'
  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: '$(platform.type) build'
      path: $(Pipeline.Workspace)
  - script: sudo apt-get update && sudo apt-get install gcc-7-multilib g++-7-multilib
    displayName: 'apt-get'
  - script: |
      conda update -y -q conda
      conda create -q -y -n CB -c intel python=$(python.version) tbb
    displayName: 'Conda create'
  - script: |
      sudo apt-get install git
      git clone https://github.com/intel/scikit-learn-intelex.git daal4py
    displayName: Clone daal4py
  - script: |
      source /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CB
      pip install -r daal4py/requirements-dev.txt
      pip install -r daal4py/requirements-test.txt
    displayName: Create python environment
  - script: |
      source /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CB
      export DALROOT=$(Pipeline.Workspace)/daal/latest
      source ${DALROOT}/env/vars.sh
      cd daal4py
      export NO_DIST=1
      export PYTHON=python
      ./conda-recipe/build.sh
    displayName: daal4py build
  - script: |
      . /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CB
      cd daal4py
      python setup_sklearnex.py install --single-version-externally-managed --record=record.txt
    displayName: sklearnex build
  - script: |
      source /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CB
      source $(Pipeline.Workspace)/daal/latest/env/vars.sh
      export NO_DIST=1
      cd daal4py
      ./conda-recipe/run_test.sh
    timeoutInMinutes: 15
    displayName: daal4py test
  - script: |
      source /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CB
      source $(Pipeline.Workspace)/daal/latest/env/vars.sh
      cd daal4py
      ret_code=0
      python -m daal4py examples/daal4py/run_examples.py
      ret_code=$(($ret_code + $?))
      python -m daal4py examples/daal4py/sycl/sklearn_sycl.py
      ret_code=$(($ret_code + $?))
      exit $ret_code
    displayName: daal4py examples
  - script: |
      source /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CB
      source $(Pipeline.Workspace)/daal/latest/env/vars.sh
      $(Pipeline.Workspace)/s/.ci/scripts/conformance_test.sh --build-dir $(Pipeline.Workspace) --conda-dir $HOME/miniconda --oneapi-dir /opt/intel/oneapi
    timeoutInMinutes: 15
    displayName: Conformance tests
  - script: |
      cp -R $(Pipeline.Workspace)/s/.ci/scripts/conformance-scripts/_log_* $(Build.ArtifactStagingDirectory)/
      cp -R $(Pipeline.Workspace)/s/.ci/scripts/conformance-scripts/report.html $(Build.ArtifactStagingDirectory)/
    displayName: copy report
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: '$(platform.type) conformance tests report'
      targetPath: '$(Build.ArtifactStagingDirectory)/'

- job: 'macOSMake'
  timeoutInMinutes: 0
  variables:
    release.dir: '__release_mac_clang'
    platform.type : 'mac32e'
  pool:
    vmImage:  'macOS-10.15'
  steps:
  - script: |
      .ci/scripts/build.sh --platform $(platform.type) --target daal
    displayName: 'make daal'
  - script: |
      .ci/scripts/build.sh --platform $(platform.type) --target oneapi_c
    displayName: 'make oneapi_c'
  - script: |
      cp -R $(release.dir) $(Build.ArtifactStagingDirectory)/
    displayName: 'Copy build'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'Mac build'
      targetPath: '$(release.dir)'

#- job: Windows
#  timeoutInMinutes: 0
#  pool:
#    vmImage: 'windows-2019'
#  steps:
#  - script: |
#      java -version
#      set INCLUDE=%JAVA_HOME%\include;%INCLUDE%
#      echo "call .ci\env\tbb.bat"
#      call .ci\env\tbb.bat
#      echo "call .\dev\download_micromkl.bat"
#      call .\dev\download_micromkl.bat
#      echo call "%ProgramFiles(x86)%\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall" x64
#      call "%ProgramFiles(x86)%\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall" x64
#      echo make daal COMPILER=vc PLAT="win32e" REQCPU="avx2"
#      make daal COMPILER=vc PLAT="win32e" REQCPU="avx2"
#    displayName: 'Build'
