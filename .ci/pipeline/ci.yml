# C/C++ with GCC
# Build your C/C++ project with GCC using make.
# Add steps that publish test results, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/c-cpp/gcc

trigger:
  branches:
    include:
    - master
    - rls/*
  paths:
    exclude:
    - docs
    - .ci/pipeline/docs.yml
pr:
  branches:
    include:
    - master
    - rls/*
  paths:
    exclude:
    - docs
    - .ci/pipeline/docs.yml

jobs:
- job: 'ClangFormat'
  pool:
    vmImage: 'ubuntu-22.04'
  steps:
    - script: |
        sudo apt-get update && sudo apt-get install -y clang-format-14
        sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-14 100
        sudo update-alternatives --set clang-format /usr/bin/clang-format-14
      displayName: 'apt-get'
    - script: |
        .ci/scripts/clang-format.sh
      displayName: 'clang-format check'
      failOnStderr: true

- job: 'LinuxMakeGNU'
  timeoutInMinutes: 0
  variables:
    release.dir: '__release_lnx_gnu'
    platform.type : 'lnx32e'
  pool:
    vmImage: 'ubuntu-22.04'
  steps:
  - script: |
      sudo apt-get update && sudo apt-get install -y gcc-multilib g++-multilib dos2unix tree
      conda create -n ci-env -q -y -c intel -c conda-forge impi-devel=2021.10.0 openjdk=17.0.3
    displayName: 'apt-get and conda install'
  - script: |
      .ci/scripts/describe_system.sh
    displayName: 'System info'
  - script: |
      .ci/scripts/build.sh --compiler gnu --optimizations avx2 --target daal --conda-env ci-env
    displayName: 'make daal'
  - script: |
      .ci/scripts/build.sh --compiler gnu --optimizations avx2 --target oneapi_c
    displayName: 'make oneapi_c'
  - task: PublishPipelineArtifact@1
    inputs:
      artifactName: '$(platform.type) build'
      targetPath: '$(Build.Repository.LocalPath)/$(release.dir)'
    displayName: 'Upload build artifacts'
    continueOnError: true
  - script: |
      .ci/scripts/test.sh --test-kind examples --build-dir $(release.dir) --compiler gnu --interface daal/java --conda-env ci-env
    displayName: 'daal/java examples'
  - script: |
      .ci/scripts/test.sh --test-kind examples --build-dir $(release.dir) --compiler gnu --interface daal/cpp --build_system cmake
    displayName: 'daal/cpp examples'
  - script: |
      .ci/scripts/test.sh --test-kind examples --build-dir $(release.dir) --compiler gnu --interface oneapi/cpp --build_system cmake
    displayName: 'oneapi/cpp examples'
  - script: |
      .ci/scripts/test.sh --test-kind samples --build-dir $(release.dir) --compiler gnu --interface daal/cpp/mpi --conda-env ci-env --build_system make
    displayName: 'daal/cpp/mpi samples'
  - script: |
      deploy/nuget/prepare_dal_nuget.sh --release-dir $(release.dir) --build-nupkg yes
      tree -h -I include __nuget/inteldal*/
      ls -lh __nuget/inteldal*.nupkg
    displayName: 'nuget pkg'
  - task: PublishPipelineArtifact@1
    inputs:
      artifactName: '$(platform.type) fail'
      targetPath: '$(Build.Repository.LocalPath)/$(release.dir)'
    displayName: 'Uploading on fail'
    condition: failed()
    continueOnError: true

- job: 'LinuxMakeDPCPP'
  timeoutInMinutes: 0
  variables:
    release.dir: '__release_lnx_icx'
    platform.type : 'lnx32e'
  pool:
    vmImage: 'ubuntu-22.04'
  steps:
  - script: |
      sudo apt-get update && sudo apt-get install -y gcc-multilib g++-multilib dos2unix
      conda create -n ci-env -q -y -c conda-forge -c intel impi-devel=2021.10.0 openjdk=17.0.3
    displayName: 'apt-get and conda install'
  - script: |
      bash .ci/scripts/install_dpcpp.sh
    displayName: 'dpcpp installation'
  - script: |
      source /opt/intel/oneapi/compiler/latest/env/vars.sh
      .ci/scripts/describe_system.sh
    displayName: 'System info'
  - script: |
      source /opt/intel/oneapi/compiler/latest/env/vars.sh
      .ci/scripts/build.sh --compiler icx  --optimizations avx2 --target daal --conda-env ci-env
    displayName: 'make daal'
  - script: |
      source /opt/intel/oneapi/compiler/latest/env/vars.sh
      .ci/scripts/build.sh --compiler icx  --optimizations avx2 --target onedal_dpc
    displayName: 'make onedal_dpc'
  - task: PublishPipelineArtifact@1
    inputs:
      artifactName: '$(platform.type) DPC build'
      targetPath: '$(Build.Repository.LocalPath)/$(release.dir)'
    displayName: 'Upload build artifacts'
    continueOnError: true
  - script: |
      source /opt/intel/oneapi/compiler/latest/env/vars.sh
      .ci/scripts/test.sh --test-kind examples --build-dir $(release.dir) --compiler clang --interface daal/java --conda-env ci-env
    displayName: 'daal/java examples'
  - script: |
      source /opt/intel/oneapi/compiler/latest/env/vars.sh
      .ci/scripts/test.sh --test-kind examples --build-dir $(release.dir) --compiler clang --interface daal/cpp --build_system cmake
    displayName: 'daal/cpp examples'
  - script: |
      source /opt/intel/oneapi/compiler/latest/env/vars.sh
      .ci/scripts/test.sh --test-kind examples --build-dir $(release.dir) --compiler clang --interface oneapi/cpp --build_system cmake
    displayName: 'oneapi/cpp examples'
  - script: |
      source /opt/intel/oneapi/compiler/latest/env/vars.sh
      .ci/scripts/test.sh --test-kind samples --build-dir $(release.dir) --compiler gnu --interface daal/cpp/mpi --conda-env ci-env --build_system make
    displayName: 'daal/cpp/mpi samples'
  - task: PublishPipelineArtifact@1
    inputs:
      artifactName: '$(platform.type) DPC fail'
      targetPath: '$(Build.Repository.LocalPath)/$(release.dir)'
    displayName: 'Uploading on fail'
    condition: failed()

- job: 'LinuxBazel'
  timeoutInMinutes: 0
  pool:
    vmImage: 'ubuntu-22.04'
  variables:
    platform.type : 'lnx32e'
    BAZEL_CACHE_DIR: $(Pipeline.Workspace)/.bazel-cache
    BAZEL_VERSION: $(Pipeline.Workspace)/bazelisk-linux-amd64
    BAZEL_CACHE_MAX_SIZE_KB: 4194304 # Size in kilobytes ~ 4Gb
  steps:
  - script: |
      # Download Bazelisk
      export SHA256="168851e70cf5f95c0e215e7f3aaca5132ffc3c8dd8f585a4157b0be2b53cfe32 bazelisk-linux-amd64"
      wget https://github.com/bazelbuild/bazelisk/releases/download/v1.16.0/bazelisk-linux-amd64
      echo ${SHA256} | sha256sum --check
      # "Install" bazelisk
      chmod +x bazelisk-linux-amd64
      mv bazelisk-linux-amd64 ${BAZEL_VERSION}

    displayName: 'install-deps'
  - script: |
      .ci/scripts/describe_system.sh
    displayName: 'System info'

  - task: Cache@2
    inputs:
      # Commit ID is added to a cache key. Caches are immutable by design,
      # so we always need to change a key to upload the last version
      # of the Bazel cache. Cache lookup is based on `restoreKeys` option.
      key: '"$(BAZEL_VERSION)" | "$(Agent.OS)" | "v2" | "$(Build.SourceVersion)"'
      restoreKeys: |
        "$(BAZEL_VERSION)" | "$(Agent.OS)" | "v2"
      path: $(BAZEL_CACHE_DIR)
    displayName: 'bazel-cache'

  - script: |
      if [ -f "${BAZEL_CACHE_DIR}/cache-clean-timestamp" ]; then
        echo
        echo "Last time the cache is cleaned:"
        cat "${BAZEL_CACHE_DIR}/cache-clean-timestamp"
        echo
      fi

      # Create `.bazelrc` and set cache directory
      # Minimal CPU instruction set in Azure is AVX2
      echo "build --disk_cache=$(BAZEL_CACHE_DIR) --cpu=avx2" > ~/.bazelrc

      # Display oneDAL build configuration
      $(BAZEL_VERSION) build @config//:dump
      echo
      cat bazel-bin/external/config/config.json
      echo
    displayName: 'bazel-configure'
  - script: |
      $(BAZEL_VERSION) build :release
    displayName: 'release'
  - task: PublishPipelineArtifact@1
    inputs:
      artifactName: '$(platform.type) Bazel build'
      targetPath: '$(Build.Repository.LocalPath)/bazel-bin/release'
    displayName: 'Upload build artifacts'
  - script: |
      $(BAZEL_VERSION) test //examples/oneapi/cpp:all \
                 --test_link_mode=dev \
                 --test_thread_mode=par
    displayName: 'cpp-examples-thread-dev'

  - script: |
      export DAALROOT=`pwd`/bazel-bin/release/daal/latest
      $(BAZEL_VERSION) test //examples/oneapi/cpp:all \
                 --test_link_mode=release_static \
                 --test_thread_mode=par
    displayName: 'cpp-examples-thread-release-static'

  - script: |
      export DAALROOT=`pwd`/bazel-bin/release/daal/latest
      $(BAZEL_VERSION) test //examples/oneapi/cpp:all \
                 --test_link_mode=release_dynamic \
                 --test_thread_mode=par
    displayName: 'cpp-examples-thread-release-dynamic'

  - script: |
      $(BAZEL_VERSION) test //cpp/oneapi/dal:tests \
                 --config=host \
                 --test_link_mode=dev \
                 --test_thread_mode=par
    displayName: 'cpp-tests-thread-dev'

  - script: |
      # Clear cache if its size exceeds some predefined value
      cache_size=$(du -sk "${BAZEL_CACHE_DIR}" | cut -f1)
      cache_size_mb=$(du -sm "${BAZEL_CACHE_DIR}" | cut -f1)
      echo "Bazel cache dir is ${BAZEL_CACHE_DIR}"
      echo "Bazel cache size is ${cache_size_mb}Mb"
      if [ ${cache_size} -ge ${BAZEL_CACHE_MAX_SIZE_KB} ]; then
          echo "Run cache cleanup..."
          echo "Current cache directory content:"
          ls -1 "${BAZEL_CACHE_DIR}"
          echo "--------------------------------"
          echo "Run bazel clean with expunge"
          echo "Remove cache directory"
          rm -r "${BAZEL_CACHE_DIR}"
          mkdir -p "${BAZEL_CACHE_DIR}"
          echo "Write timestamp to the cache"
          date > "${BAZEL_CACHE_DIR}/cache-clean-timestamp"
          echo "Current cache directory content:"
          ls -1 "${BAZEL_CACHE_DIR}"
          echo "--------------------------------"
      else
          echo "No need for cleanup"
      fi
    displayName: 'bazel-cache-limit'

- job: LinuxDaal4py
  dependsOn: LinuxMakeGNU
  timeoutInMinutes: 0
  variables:
    release.dir: '__release_lnx_gnu'
    platform.type : 'lnx32e'
  pool:
    vmImage: 'ubuntu-22.04'
    maxParallel: 2
  strategy:
    matrix:
      Python38:
        python.version: '3.8'
  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: '$(platform.type) build'
      path: $(Pipeline.Workspace)
  - script: sudo apt-get update && sudo apt-get install -y git gcc-multilib g++-multilib
    displayName: 'apt-get'
  - script: |
      .ci/scripts/describe_system.sh
    displayName: 'System info'
  - script: |
      conda update -y -q conda
      conda create -q -y -n CB -c intel python=$(python.version) tbb
    displayName: 'Conda create'
  - script: |
      git clone https://github.com/intel/scikit-learn-intelex.git daal4py
    displayName: Clone daal4py
  - script: |
      source /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CB
      pip install -r daal4py/dependencies-dev
      pip install -r daal4py/requirements-test.txt
    displayName: Create python environment
  - script: |
      source /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CB
      export DALROOT=$(Pipeline.Workspace)/daal/latest
      source ${DALROOT}/env/vars.sh
      cd daal4py
      export NO_DIST=1
      export PYTHON=python
      ./conda-recipe/build.sh
    displayName: daal4py build
  - task: PublishPipelineArtifact@1
    inputs:
      artifactName: '$(platform.type) daal4py build'
      targetPath: '$(Build.Repository.LocalPath)/daal4py'
    displayName: 'Upload daal4py build artifacts'
    continueOnError: true
  - script: |
      . /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CB
      export DALROOT=$(Pipeline.Workspace)/daal/latest
      cd daal4py
      python setup_sklearnex.py install --single-version-externally-managed --record=record.txt
    displayName: sklearnex build
  - script: |
      source /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CB
      source $(Pipeline.Workspace)/daal/latest/env/vars.sh
      export NO_DIST=1
      ./daal4py/conda-recipe/run_test.sh
    timeoutInMinutes: 15
    displayName: daal4py test
  - script: |
      source /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CB
      source $(Pipeline.Workspace)/daal/latest/env/vars.sh
      ret_code=0
      python -m daal4py daal4py/tests/run_examples.py
      ret_code=$(($ret_code + $?))
      python -m daal4py daal4py/examples/daal4py/sycl/sklearn_sycl.py
      ret_code=$(($ret_code + $?))
      exit $ret_code
    displayName: daal4py examples
  - script: |
      source /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CB
      source $(Pipeline.Workspace)/daal/latest/env/vars.sh
      $(Pipeline.Workspace)/s/.ci/scripts/conformance_test.sh --build-dir $(Pipeline.Workspace) --conda-dir $HOME/miniconda --oneapi-dir /opt/intel/oneapi
    timeoutInMinutes: 15
    displayName: Conformance tests
  - task: PublishPipelineArtifact@1
    inputs:
      artifactName: '$(platform.type) conformance tests report'
      targetPath: '$(Pipeline.Workspace)/s/.ci/scripts/conformance-scripts/'
    displayName: 'Upload conformance tests artifacts'
    continueOnError: true

- job: 'macOSMakeClang'
  timeoutInMinutes: 0
  variables:
    release.dir: '__release_mac_clang'
    platform.type : 'mac32e'
  pool:
    vmImage:  'macos-12'
  steps:
  - script: |
      brew install dos2unix tree
      conda create -n ci-env -q -y -c conda-forge python=3.9 openjdk=17.0.3
      source /usr/local/miniconda/etc/profile.d/conda.sh
      conda activate ci-env
      pip install -q cpufeature
    displayName: 'brew and conda install'
  - script: |
      source /usr/local/miniconda/etc/profile.d/conda.sh
      conda activate ci-env
      .ci/scripts/describe_system.sh
    displayName: 'System info'
  - script: |
      .ci/scripts/build.sh --compiler clang --target daal --optimizations "sse2 avx2" --conda-env ci-env
    displayName: 'make daal'
  - script: |
      .ci/scripts/build.sh --compiler clang --target oneapi_c --optimizations "sse2 avx2"
    displayName: 'make oneapi_c'
  - task: PublishPipelineArtifact@1
    inputs:
      artifactName: '$(platform.type) build'
      targetPath: '$(Build.Repository.LocalPath)/$(release.dir)'
    displayName: 'Upload build artifacts'
    continueOnError: true
  - script: |
      .ci/scripts/test.sh --test-kind examples --build-dir $(release.dir) --compiler clang --interface daal/java --conda-env ci-env
    displayName: 'daal/java examples'
  - script: |
      .ci/scripts/test.sh --test-kind examples --build-dir $(release.dir) --compiler clang --interface daal/cpp --build_system cmake
    displayName: 'daal/cpp examples'
  - script: |
      .ci/scripts/test.sh --test-kind examples --build-dir $(release.dir) --compiler clang --interface oneapi/cpp --build_system cmake
    displayName: 'oneapi/cpp examples'
  - script: |
      deploy/nuget/prepare_dal_nuget.sh --release-dir $(release.dir) --build-nupkg yes
      tree -h -I include __nuget/inteldal*/
      ls -lh __nuget/inteldal*.nupkg
    displayName: 'nuget pkg'
  - task: PublishPipelineArtifact@1
    inputs:
      artifactName: '$(platform.type) fail'
      targetPath: '$(Build.Repository.LocalPath)/$(release.dir)'
    displayName: 'Uploading on fail'
    condition: failed()
    continueOnError: true

- job: 'WindowsMakeVC'
  timeoutInMinutes: 0
  variables:
    release.dir: '__release_win_vc'
    platform.type : 'win32e'
  pool:
    vmImage: 'windows-2022'
  steps:
  - script: |
      set PATH=C:\msys64\usr\bin;%PATH%
      pip install cpufeature
      pacman -S -y --noconfirm zip dos2unix tree
    displayName: 'pacman'
  - script: |
      set PATH=C:\msys64\usr\bin;%PATH%
      bash .ci/scripts/describe_system.sh
    displayName: 'System info'
  - script: |
      .\.ci\scripts\build.bat daal vc avx2
    displayName: 'make daal'
  - script: |
      .\.ci\scripts\build.bat oneapi_c vc avx2
    displayName: 'make oneapi_c'
  - task: PublishPipelineArtifact@1
    inputs:
      artifactName: '$(platform.type) build'
      targetPath: '$(Build.Repository.LocalPath)/$(release.dir)'
    displayName: 'Upload build artifacts'
    continueOnError: true
  - script: |
      .\.ci\scripts\test.bat daal\java dll msvs
    displayName: 'daal/java examples'
  - script: |
      .\.ci\scripts\test.bat daal\cpp lib msvs cmake
      .\.ci\scripts\test.bat daal\cpp dll msvs cmake
    displayName: 'daal/cpp examples'
  - script: |
      .\.ci\scripts\test.bat oneapi\cpp lib msvs cmake
      .\.ci\scripts\test.bat oneapi\cpp dll msvs cmake
    displayName: 'oneapi/cpp examples'
  - script: |
      set PATH=C:\msys64\usr\bin;%PATH%
      bash deploy/nuget/prepare_dal_nuget.sh --release-dir $(release.dir) --build-nupkg yes
      tree -h -I include __nuget/inteldal*/
      ls -lh __nuget/inteldal*.nupkg
    displayName: 'nuget pkg'
  - task: PublishPipelineArtifact@1
    inputs:
      artifactName: '$(platform.type) fail'
      targetPath: '$(Build.Repository.LocalPath)/$(release.dir)'
    displayName: 'Uploading on fail'
    condition: failed()
    continueOnError: true
